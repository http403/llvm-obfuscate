name: Build Binaries

on: 
  workflow_dispatch:
    inputs:
      projects:
        description: 'LLVM projects to build (semi-colon delimited)'
        default: 'llvm;clang;clang-tools-extra;lld;mlir'
        required: false
        type: string
      runtimes:
        description: 'LLVM runtimes to build (semi-colon delimited)'
        default: 'compiler-rt;libcxx;libcxxabi;libunwind'
        required: false
        type: string
      cmake_install_prefix:
        description: 'Default install path'
        default: '/opt/ollvm'
        required: false
        type: string
      cmake_flags:
        description: 'Additional flags passed during CMake configure'
        default: ''
        required: false
        type: string

  schedule:
    - cron: '0 0 1 */2 *'

permissions:
  contents: read

jobs:
  prepare:
    name: prepare variables
    runs-on: ubuntu-22.04
    outputs:
      projects: ${{ steps.filter.outputs.projects }}
      runtimes: ${{ steps.filter.outputs.runtimes }}
      cmake_install_prefix: ${{ steps.filter.outputs.cmake_install_prefix }}
      cmake_flags: ${{ steps.filter.outputs.cmake_flags }}
      timestamp: ${{ steps.filter.outputs.timestamp }}

    steps:
      - id: filter
        run: |
          projects=${{ inputs.projects }}
          runtimes=${{ inputs.runtimes }}
          cmake_install_prefix=${{ inputs.cmake_install_prefix }}
          cmake_flags=${{ inputs.cmake_flags }}

          echo "projects=${projects:-llvm;clang;clang-tools-extra;lld;mlir}" >> "$GITHUB_OUTPUT"
          echo "runtimes=${runtimes:-compiler-rt;libcxx;libcxxabi;libunwind}" >> "$GITHUB_OUTPUT"
          echo "cmake_install_prefix=${cmake_install_prefix:-/opt/ollvm}" >> "$GITHUB_OUTPUT"
          echo "cmake_flags=${cmake_flags:-}" >> "$GITHUB_OUTPUT"

          echo "timestamp=$(date -u +'%Y%m%dT%H%mZ')" >> "$GITHUB_OUTPUT"

  build-cache:
    name: cache
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          path: llvm-obfuscate
          submodules: recursive

      - name: Install Ninja
        uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 250M
          key: sccache-ubuntu-22.04-${{ hashFiles('llvm-obfuscate/clang/lib/**/*.*') }}
          variant: sccache

      - name: Build Clang
        run: |
          cmake -G Ninja -S llvm-obfuscate/llvm -B build \
            -C llvm-obfuscate/clang/cmake/caches/Release.cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          ninja -v -C build clang

  build-binaries:
    name: ubuntu-22.04
    runs-on: ubuntu-22.04
    needs: 
      - prepare
      - build-cache
    env:
      Package: clang+llvm+ollvm-${{ github.sha }}
      DESTDIR: install
    permissions:
      contents: write

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          path: llvm-obfuscate
          submodules: recursive
        
      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@ca3acd2731eef11f1572ccb126356c2f9298d35e # v1.2.9
        with:
          max-size: 250M
          key: sccache-ubuntu-22.04-${{ hashFiles('llvm-obfuscate/clang/lib/**/*.*') }}
          save: false
          variant: sccache

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Install dependencies
        run: sudo apt install chrpath gcc-multilib

      - name: Figure out how many cores can be used
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Configure CMake
        run: |
          cmake -B build -G Ninja -S llvm-obfuscate/llvm \
            -DCMAKE_INSTALL_PREFIX=${{ needs.prepare.outputs.cmake_install_prefix }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DLLVM_ENABLE_PROJECTS='${{ needs.prepare.outputs.projects }}' \
            -DLLVM_ENABLE_RUNTIMES='${{ needs.prepare.outputs.runtimes }}' \
            -DLLVM_OBFUSCATION_LINK_INTO_TOOLS=ON \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_LIT_ARGS="-j ${{ steps.cpu-cores.outputs.count }} -v" \
            ${{ needs.prepare.outputs.cmake_flags }}

      - name: Build binaries
        run: |
          ninja -C build -j ${{ steps.cpu-cores.outputs.count }} -v -l $((${{ steps.cpu-cores.outputs.count }} + 1))
      
      - name: Install binaries to dummy directory (set by ENV)
        run: ninja -C build install
      
      - name: Package binaries
        run: |
          mv build/$DESTDIR ${{ env.Package }}
          tar -cf - ${{ env.Package }} | gzip -9c > ${{ env.Package }}.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.prepare.outputs.timestamp }}
          path: ${{ env.Package }}.tar.gz
          compression-level: 0
          if-no-files-found: error
    